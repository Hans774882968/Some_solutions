d[i,j,k]表示ith队伍在前j个题里做出k个的概率。得到该数组后即可得到每个队伍都至少做出1题的概率p1，和每个队伍做出的题都是1到
n-1的概率p2。p1-p2就是答案。
dp用全概率公式来推。i是不影响的，只需要考虑前j-1个题做出k题=>jth未做出，做出k-1=>jth做出。这个过程可以看成：我们先做jth题
，然后做完前面的题以后需要对几个。
//每个队伍都至少做出0题的概率p1，和每个队伍做出的题都是0到n-1的概率p2。p1-p2，这个和上面那个含义不一样，他只保证至少1队
做出至少n个题，不能保证每个队伍至少过1题。
这个作差&&为了求p1、p2而构造的dp我都想不到QAQ

最后是精度坑：选C++！老poj题需要选C++！否则精度对不上标程！而hdu可以选g++，跑代码速度快些。

5 4 1
0.9 0.9 0.3 0.8 0.54
1 0.9 0.9 0.3 0.8
0.3 0.82 0.56 0.9 1
0.31 0.18 0.54 1 0.8
5 4 2
0.9 0.9 0.3 0.8 0.54
1 0.9 0.9 0.3 0.8
0.3 0.82 0.56 0.9 1
0.31 0.18 0.54 1 0.8
5 4 3
0.9 0.9 0.3 0.8 0.54
1 0.9 0.9 0.3 0.8
0.3 0.82 0.56 0.9 1
0.31 0.18 0.54 1 0.8
5 4 4
0.9 0.9 0.3 0.8 0.54
1 0.9 0.9 0.3 0.8
0.3 0.82 0.56 0.9 1
0.31 0.18 0.54 1 0.8
5 4 5
0.9 0.9 0.3 0.8 0.54
1 0.9 0.9 0.3 0.8
0.3 0.82 0.56 0.9 1
0.31 0.18 0.54 1 0.8
6 5 5
0.9 0.9 0.3 0.8 0.54 0.3
1 0.9 0.9 0.3 0.8 0.4
0.3 0.82 0.56 0.9 1 0.2
0.31 0.18 0.54 1 0.8 0.65
0.12 0.24 0.36 0.48 0.6 0.33
6 5 4
0.9 0.9 0.3 0.8 0.54 0.3
1 0.9 0.9 0.3 0.8 0.4
0.3 0.82 0.56 0.9 1 0.2
0.31 0.18 0.54 1 0.8 0.65
0.12 0.24 0.36 0.48 0.6 0.33
6 5 3
0.9 0.9 0.3 0.8 0.54 0.3
1 0.9 0.9 0.3 0.8 0.4
0.3 0.82 0.56 0.9 1 0.2
0.31 0.18 0.54 1 0.8 0.65
0.12 0.24 0.36 0.48 0.6 0.33
6 5 6
0.9 0.9 0.3 0.8 0.54 0.3
1 0.9 0.9 0.3 0.8 0.4
0.3 0.82 0.56 0.9 1 0.2
0.31 0.18 0.54 1 0.8 0.65
0.12 0.24 0.36 0.48 0.6 0.33
6 5 1
0.9 0 0 0 0 0
0.3 0 0 0 0 0
0 0 0 0 0.3 0
0 0 0 0.3 0 0
0 0 0 0 0.6 0
//0.999*3 0.953 0.383 0.655 0.929 0.940 0.135 0.015